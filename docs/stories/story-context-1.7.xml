<?xml version="1.0" encoding="UTF-8"?>
<!-- BMAD BMM Story Context - Auto-generated by story-context workflow -->
<!-- Generated: 2025-10-17 -->

<story-context>
  <metadata>
    <story_id>1.7</story_id>
    <epic_id>1</epic_id>
    <title>Playlist Discovery and Listing</title>
    <story_file>docs/stories/story-1.7.md</story_file>
    <generated_date>2025-10-17</generated_date>
  </metadata>

  <story_statement>
    <as_a>user</as_a>
    <i_want>to see a list of my existing Spotify playlists with their IDs</i_want>
    <so_that>I can easily find playlist IDs to use with the `groove playlist add` command</so_that>
  </story_statement>

  <acceptance_criteria>
    <criterion id="1">
      <title>List Command Implementation</title>
      <description>`groove playlist list` command fetches and displays user's playlists. Command is properly integrated into the CLI subcommand structure. Help documentation includes the list command.</description>
    </criterion>
    <criterion id="2">
      <title>Playlist Information Display</title>
      <description>Shows playlist name, ID (for use with other commands), track count, visibility (public/private). Output is formatted as a readable table.</description>
    </criterion>
    <criterion id="3">
      <title>API Integration</title>
      <description>Uses Spotify API `GET /v1/me/playlists` endpoint. Handles pagination for users with many playlists (>50). Automatically fetches all pages of playlists. Properly handles authentication (reuses existing auth system).</description>
    </criterion>
    <criterion id="4">
      <title>Optional Features</title>
      <description>`--format json` flag for JSON output (useful for scripting). `--filter &lt;name&gt;` option to search playlists by name (case-insensitive). Shows owner information for collaborative playlists.</description>
    </criterion>
    <criterion id="5">
      <title>Error Handling</title>
      <description>Clear error message if not authenticated. Handles API rate limiting gracefully. Handles network errors appropriately. Displays helpful message if user has no playlists.</description>
    </criterion>
  </acceptance_criteria>

  <tasks>
    <task id="1" ac_ref="2,3">
      <title>Extend PlaylistManager with list functionality</title>
      <subtasks>
        <subtask>Add `list_playlists` method to `PlaylistManager`</subtask>
        <subtask>Implement Spotify API call to `GET /v1/me/playlists`</subtask>
        <subtask>Handle pagination (Spotify returns 50 playlists per page)</subtask>
        <subtask>Return structured data with name, ID, track count, visibility, owner</subtask>
        <subtask>Add error handling for API failures</subtask>
        <subtask>Test with mocked API responses</subtask>
      </subtasks>
    </task>
    <task id="2" ac_ref="1">
      <title>Implement CLI list command</title>
      <subtasks>
        <subtask>Add `list` command to `Groove::Playlist` CLI class</subtask>
        <subtask>Add command-line options: `--format`, `--filter`</subtask>
        <subtask>Integrate with `PlaylistManager.list_playlists`</subtask>
        <subtask>Handle command-line argument parsing</subtask>
        <subtask>Update help text in `lib/groove/cli.rb`</subtask>
      </subtasks>
    </task>
    <task id="3" ac_ref="2,4">
      <title>Format and display output</title>
      <subtasks>
        <subtask>Implement table formatting for default output</subtask>
        <subtask>Include columns: Name, ID, Tracks, Visibility, Owner</subtask>
        <subtask>Implement JSON formatting for `--format json` option</subtask>
        <subtask>Implement name filtering for `--filter` option</subtask>
        <subtask>Add visual indicators (üîí for private, üåç for public)</subtask>
        <subtask>Handle empty results gracefully</subtask>
      </subtasks>
    </task>
    <task id="4" ac_ref="5">
      <title>Error handling and edge cases</title>
      <subtasks>
        <subtask>Check authentication before API call</subtask>
        <subtask>Handle "not authenticated" error with helpful message</subtask>
        <subtask>Handle rate limiting with retry logic</subtask>
        <subtask>Handle network timeouts and connection errors</subtask>
        <subtask>Display message for users with no playlists</subtask>
        <subtask>Test error scenarios</subtask>
      </subtasks>
    </task>
    <task id="5" ac_ref="all">
      <title>Testing</title>
      <subtasks>
        <subtask>Unit tests for `PlaylistManager.list_playlists`</subtask>
        <subtask>Mock Spotify API responses (success, pagination, errors)</subtask>
        <subtask>Test CLI command integration</subtask>
        <subtask>Test table formatting output</subtask>
        <subtask>Test JSON formatting output</subtask>
        <subtask>Test filtering functionality</subtask>
        <subtask>Test error handling paths</subtask>
        <subtask>Integration test with mocked auth</subtask>
      </subtasks>
    </task>
    <task id="6" ac_ref="1">
      <title>Documentation</title>
      <subtasks>
        <subtask>Update `lib/groove/cli.rb` help text</subtask>
        <subtask>Add command to README examples</subtask>
        <subtask>Update usage documentation</subtask>
        <subtask>Document the `--format` and `--filter` options</subtask>
      </subtasks>
    </task>
  </tasks>

  <artifacts>
    <docs>
      <doc>
        <path>docs/tech-specs/tech-spec-epic-1.md</path>
        <title>Epic 1 Technical Specification</title>
        <section>Story 1.7: Playlist Discovery and Listing</section>
        <snippet>Implements `groove playlist list` command to display user's playlists. Fetch playlists from Spotify API (GET /v1/me/playlists). Display playlist name, ID, track count, and visibility. Support pagination for users with many playlists.</snippet>
      </doc>
      <doc>
        <path>docs/epics/epic-1-core-playlist-sync.md</path>
        <title>Epic 1: Core Playlist Sync (MVP)</title>
        <section>Stories</section>
        <snippet>Story 1.7: Playlist Discovery and Listing - Enable users to discover their existing playlists and obtain IDs for use with add command.</snippet>
      </doc>
      <doc>
        <path>docs/stories/story-1.4.md</path>
        <title>Story 1.4: Playlist Creation and Management</title>
        <section>Implementation</section>
        <snippet>Completed implementation of PlaylistManager with create_playlist and add_tracks methods. Establishes patterns for API integration, error handling, and batch operations.</snippet>
      </doc>
      <doc>
        <path>docs/stories/story-1.5.md</path>
        <title>Story 1.5: Error Handling and User Feedback</title>
        <section>Implementation Summary</section>
        <snippet>Custom error classes per module (PlaylistManager::Error). User-friendly error messages with visual indicators (‚úÖ, ‚ùå, ‚ö†Ô∏è). Proper exit codes and actionable error messages.</snippet>
      </doc>
      <doc>
        <path>docs/stories/story-1.6.md</path>
        <title>Story 1.6: Command-Line Interface</title>
        <section>CLI Structure</section>
        <snippet>Thor-based CLI with subcommands. Playlist commands under Groove::Playlist class. Pattern: desc, options, implementation with auth check, manager instantiation, error handling.</snippet>
      </doc>
    </docs>

    <code>
      <artifact>
        <path>lib/groove/playlist_manager.rb</path>
        <kind>service</kind>
        <symbol>PlaylistManager</symbol>
        <lines>1-125</lines>
        <reason>Core service class for playlist operations. Extend this with list_playlists method. Follow existing patterns for API calls, authentication, error handling, and pagination.</reason>
        <patterns>
          <pattern>API base URL: SPOTIFY_API_BASE = 'https://api.spotify.com/v1'</pattern>
          <pattern>Rate limiting: RATE_LIMIT_DELAY = 0.1, MAX_TRACKS_PER_REQUEST = 100</pattern>
          <pattern>Error tracking: @errors, @warnings, @operations arrays</pattern>
          <pattern>API methods: make authenticated Faraday requests, handle response, parse JSON</pattern>
          <pattern>Error handling: rescue StandardError, add to @errors, return nil or false</pattern>
        </patterns>
      </artifact>
      <artifact>
        <path>lib/groove/playlist.rb</path>
        <kind>cli</kind>
        <symbol>Playlist</symbol>
        <lines>1-228</lines>
        <reason>CLI command class for playlist operations. Add list command here following pattern of create/add/sync commands.</reason>
        <patterns>
          <pattern>Thor subcommand pattern: desc, option declarations, method definition</pattern>
          <pattern>Authentication check: Configuration.new, Authentication.new, auth.authenticated?</pattern>
          <pattern>Manager instantiation: PlaylistManager.new(auth.access_token)</pattern>
          <pattern>Output: say with color codes (:green, :red, :yellow), visual indicators (‚úÖ, ‚ùå)</pattern>
          <pattern>Error handling: check manager.errors, display each error, exit 1</pattern>
        </patterns>
      </artifact>
      <artifact>
        <path>lib/groove/cli.rb</path>
        <kind>cli</kind>
        <symbol>CLI</symbol>
        <lines>1-49</lines>
        <reason>Main CLI entry point. Update help text to include new `groove playlist list` command.</reason>
        <patterns>
          <pattern>Subcommand registration: desc 'playlist SUBCOMMAND', subcommand 'playlist', Playlist</pattern>
          <pattern>Help text format: command name with padding, dash separator, description</pattern>
        </patterns>
      </artifact>
      <artifact>
        <path>lib/groove/authentication.rb</path>
        <kind>service</kind>
        <symbol>Authentication</symbol>
        <lines>1-186</lines>
        <reason>Provides access_token for API calls. Reference for how authentication works and how to check authenticated? status.</reason>
        <patterns>
          <pattern>Token management: load_tokens, save_tokens, refresh_tokens</pattern>
          <pattern>Token refresh: automatic refresh when expired via refresh_tokens method</pattern>
        </patterns>
      </artifact>
    </code>

    <interfaces>
      <interface>
        <name>Spotify Web API - Get User's Playlists</name>
        <endpoint>GET https://api.spotify.com/v1/me/playlists</endpoint>
        <params>
          <param>limit (optional): Number of playlists to return (max 50, default 20)</param>
          <param>offset (optional): Index of first playlist to return (for pagination)</param>
        </params>
        <response_structure>
{
  "items": [
    {
      "id": "playlist_id",
      "name": "Playlist Name",
      "tracks": { "total": 42 },
      "public": true,
      "owner": { "display_name": "Username", "id": "user_id" }
    }
  ],
  "next": "https://api.spotify.com/v1/me/playlists?offset=50",
  "limit": 50,
  "offset": 0,
  "total": 150
}
        </response_structure>
        <authentication>Bearer token in Authorization header</authentication>
        <pagination>Follow 'next' field until null to fetch all playlists</pagination>
      </interface>
      <interface>
        <name>PlaylistManager Public API</name>
        <methods>
          <method>initialize(access_token) - Constructor</method>
          <method>create_playlist(name:, description: nil, public: false) - Returns playlist hash or nil</method>
          <method>add_tracks(playlist_id:, track_ids:, skip_duplicates: true) - Returns operation result hash</method>
          <method>get_playlist_tracks(playlist_id:) - Returns array of track IDs</method>
          <method>NEW: list_playlists(limit: nil, filter: nil) - TO BE IMPLEMENTED</method>
        </methods>
        <return_patterns>
          <pattern>Playlist hash: { id:, name:, public:, tracks:, owner:, external_urls: }</pattern>
          <pattern>Operation result: { success:, added:, skipped: }</pattern>
          <pattern>Errors accessible via: manager.errors, manager.warnings</pattern>
        </return_patterns>
      </interface>
    </interfaces>
  </artifacts>

  <constraints>
    <development>
      <constraint>Follow existing PlaylistManager patterns: private API helper methods, error tracking in @errors array</constraint>
      <constraint>Follow existing CLI patterns: authentication check first, manager instantiation, colored output, error display</constraint>
      <constraint>Pagination: Spotify returns max 50 playlists per page, must follow 'next' field until null</constraint>
      <constraint>Rate limiting: Use RATE_LIMIT_DELAY (0.1s) between requests</constraint>
      <constraint>Error handling: Custom exceptions (PlaylistManager::Error), user-friendly messages, proper exit codes</constraint>
    </development>
    <testing>
      <constraint>Mock Spotify API responses using WebMock (established pattern in spec files)</constraint>
      <constraint>Test pagination scenarios: empty list, single page, multiple pages</constraint>
      <constraint>Test error scenarios: not authenticated, API errors, rate limiting, network failures</constraint>
      <constraint>Test both output formats: table (default) and JSON (--format json)</constraint>
      <constraint>Test filtering: case-insensitive name matching with --filter option</constraint>
    </testing>
    <architecture>
      <constraint>Keep business logic in PlaylistManager, keep presentation logic in Playlist CLI class</constraint>
      <constraint>Return structured data from PlaylistManager, format in CLI layer</constraint>
      <constraint>Reuse existing authentication system (Configuration + Authentication)</constraint>
      <constraint>Follow Ruby conventions: snake_case methods, attr_reader for instance variables</constraint>
    </architecture>
  </constraints>

  <implementation_guidance>
    <guidance>
      <phase>PlaylistManager Extension</phase>
      <steps>
        <step>1. Add `list_playlists` method to PlaylistManager class (lib/groove/playlist_manager.rb)</step>
        <step>2. Implement API call to GET /v1/me/playlists with pagination loop</step>
        <step>3. Parse response and extract: id, name, tracks.total, public, owner.display_name</step>
        <step>4. Support optional limit parameter (return first N playlists)</step>
        <step>5. Support optional filter parameter (case-insensitive name matching)</step>
        <step>6. Add error handling following existing patterns (@errors array, rescue StandardError)</step>
      </steps>
    </guidance>
    <guidance>
      <phase>CLI Command Implementation</phase>
      <steps>
        <step>1. Add `list` command to Playlist class (lib/groove/playlist.rb)</step>
        <step>2. Add Thor options: --format (string, default: table), --filter (string, optional)</step>
        <step>3. Implement authentication check (reuse pattern from create/add commands)</step>
        <step>4. Call manager.list_playlists with filter option</step>
        <step>5. Format output: table format (default) or JSON format (--format json)</step>
        <step>6. Add visual indicators: üîí for private playlists, üåç for public playlists</step>
        <step>7. Handle empty results with friendly message</step>
        <step>8. Display errors if any (manager.errors.each)</step>
      </steps>
    </guidance>
    <guidance>
      <phase>Testing</phase>
      <steps>
        <step>1. Create spec/groove/playlist_manager_spec.rb tests for list_playlists</step>
        <step>2. Mock API responses: success (single page), success (multiple pages), empty, error</step>
        <step>3. Test pagination: verify all pages fetched when next is present</step>
        <step>4. Test filtering: verify case-insensitive name matching</step>
        <step>5. Test error scenarios: not authenticated, API errors, network failures</step>
        <step>6. Add CLI integration tests if needed</step>
      </steps>
    </guidance>
    <guidance>
      <phase>Documentation</phase>
      <steps>
        <step>1. Update lib/groove/cli.rb help text to include `groove playlist list`</step>
        <step>2. Add description: "List your Spotify playlists with IDs"</step>
        <step>3. Update README with examples of using playlist list command</step>
        <step>4. Document --format and --filter options</step>
      </steps>
    </guidance>
  </implementation_guidance>

  <testing_guidance>
    <test_file>spec/groove/playlist_manager_spec.rb</test_file>
    <test_scenarios>
      <scenario>list_playlists returns empty array when user has no playlists</scenario>
      <scenario>list_playlists returns single page of playlists (less than 50)</scenario>
      <scenario>list_playlists handles pagination and returns all playlists (more than 50)</scenario>
      <scenario>list_playlists respects limit parameter</scenario>
      <scenario>list_playlists filters by name (case-insensitive)</scenario>
      <scenario>list_playlists adds error when not authenticated</scenario>
      <scenario>list_playlists handles API errors gracefully</scenario>
      <scenario>list_playlists handles rate limiting</scenario>
    </test_scenarios>
    <mocking_strategy>
      <mock>WebMock for Spotify API endpoints</mock>
      <mock>Stub successful responses with sample playlist data</mock>
      <mock>Stub paginated responses with multiple next values</mock>
      <mock>Stub error responses (401, 429, 500)</mock>
    </mocking_strategy>
  </testing_guidance>

  <reference_implementations>
    <reference>
      <source>lib/groove/playlist_manager.rb (create_playlist method)</source>
      <pattern>API call pattern with authentication, response handling, error tracking</pattern>
    </reference>
    <reference>
      <source>lib/groove/playlist_manager.rb (get_playlist_track_ids method)</source>
      <pattern>Pagination pattern - loop while next_url present, accumulate results</pattern>
    </reference>
    <reference>
      <source>lib/groove/playlist.rb (create command)</source>
      <pattern>CLI command pattern with auth check, manager call, output formatting, error display</pattern>
    </reference>
    <reference>
      <source>lib/groove/playlist.rb (add command)</source>
      <pattern>CLI command with options (--skip_duplicates, --format)</pattern>
    </reference>
  </reference_implementations>

  <notes>
    <note>User pain point: Currently users must go to Spotify web interface to find playlist IDs for use with `groove playlist add` command</note>
    <note>This command makes the CLI self-sufficient - users can discover playlists without leaving terminal</note>
    <note>JSON output format (--format json) enables scripting and automation use cases</note>
    <note>Filtering (--filter) helps users with many playlists quickly find specific ones</note>
    <note>Visual indicators (üîí/üåç) provide quick visibility status at a glance</note>
  </notes>
</story-context>

